################################################################################
Шаблонизатор для страниц и приложений
################################################################################

********************************************************************************
Общие сведения
********************************************************************************

Для  создания шаблонов  страниц и написания приложений используется специализированный интерпретируемый язык, который предоставляет возможность формировать требуемую HTML-страницу.

При этом непосредственно  шаблоны могут включать вызовы следующих видов:

1) FuncName()

2) FuncName{}

Вне зависимости от используемого вида, производится  вызов требуемой функции языка GO, однако в первом случае параметры передаются в функцию как массив строк, а во втором -- как ассоциативный массив с парами ключ-значение. При этом передаваемые параметры можно не заключать в кавычки, но если какой-либо параметр содержит запятую или закрывающую скобку, то следует заключить значение данного параметра  в двойные или обратные кавычки ("значение" или `значение`, соответственно).


Например,

.. code:: js

      FuncName( строка 1, строка 2, “строка, включающая запятую”)

.. code:: js

      FuncName{ string1: строка 1, string2: строка 2, string3: “строка, которая с запятой” }

*Обратите внимание, функции могут дополняться разработчиком системы новыми параметрами без предварительного уведомления пользователей.*

********************************************************************************
Список функций
********************************************************************************
 **Функция AppNav**

Возвращает ссылку на приложение с указанным именем

**Синтаксис:**

.. code:: js

AppNav(appname, [text])

**Параметры:**

*appname*

Наименование приложения, на которое требуется получить ссылку

*text*

Тест возвращаемой ссылки (необязательный параметр)

**Возвращаемые значения:**

Ссылка на приложение в формате ?.

**Примечания:**

Если параметр text не указан, то текст ссылки скопирован с параметра appname.

**Функция BtnEdit**

Создает элемент управления "Кнопка (шестеренка)"

**Синтаксис:**

.. code:: js

BtnEdit(page, id)

**Параметры:**

*page*

Активная ссылка на создаваемом элементе управления

*id*

Передаваемый параметр при активации созданного элемента управления

**Возвращаемые значения:**

?

**Примечания:**

Данная функция применяется в таблицах для формирования ссылок на операцию редактирования элементов.

**Функция BtnTemplate**

Создает элемент управления "Кнопка (загрузка шаблона)"

**Синтаксис:**

.. code:: js

BtnTemplate(template, text, params)

**Параметры:**

*template*

Активная ссылка на создаваемом элементе управления

*text*

Текст ссылки

*params*

Передаваемые параметры при активации созданного элемента управления (необязательный параметр)

**Возвращаемые значения:**

?

**Функция GetRow**

Возвращает определенную запись из заданной таблицы

**Синтаксис:**

.. code:: js

GetRow(prefix, table, colname, value)

**Параметры:**

*prefix*

Список переменных для записи результата выполнения функции

*table*

Наименование таблицы с запрашиваемой записью

*colname*

Наименование искомого столбца

*value*

Искомое значение

**Возвращаемые значения:**

?

**Примечания:**

Вывод данных при выполнении данной функции отсутствует.

 **Функция Image**

Возвращает тэг изображения

**Синтаксис:**

.. code:: js

Image(src, [alt] )

**Параметры:**

*src*

Ссылка на изображение, тег которого требуется получить

*alt*

Альтернативный текст изображения (необязательный параметр)

**Возвращаемые значения:**

?.

 **Функция Json**

Формирует строку формата JSON из произвольного набора параметров

**Синтаксис:**

.. code:: js

Json(data)

**Параметры:**

*data*

Набора параметров для преобразования в JSON

**Возвращаемые значения:**

Строка формата JSON с набором заданных параметров.

**Функция Navigation**

Возвращает редактируемую панель

**Синтаксис:**

.. code:: js

Navigation(params, ….)

**Параметры:**

*params*

Хлебные крошки

**Возвращаемые значения:**

Редактируемая панель с заданными хлебными крошками и кнопкой Edit в правом углу

**Функция LiTemplate**

Создает элемент управления "Список (загрузка шаблона)"

**Синтаксис:**

.. code:: js

LiTemplate(template, text)

**Параметры:**

*template*

Активная ссылка на создаваемом элементе управления

*text*

Текст ссылки (необязательный параметр)

**Возвращаемые значения:**

?

**Примечания:**

Если параметр text не указан, то текст ссылки будет скопирован с параметра template.

**Функция LinkTemplate**

Создает элемент управления "Ссылка (загрузка шаблона)"

**Синтаксис:**

.. code:: js

LinkTemplate(template, text, params)

**Параметры:**

*template*

Активная ссылка на создаваемом элементе управления

*text*

Текст ссылки

*params*

Передаваемые параметры при активации созданного элемента управления (необязательный параметр)

**Возвращаемые значения:**

?

 **Функция MarkDown**

Преобразует разметку текста из формата Markdown в формат HTML

**Синтаксис:**

.. code:: js

MarkDown(text)

**Параметры:**

*text*

Текст в разметке Markdown

**Возвращаемые значения:**

Текст в разметке HTML


 **Функция PageTitle**

Преобразует разметку текста из формата Markdown в формат HTML

**Синтаксис:**

.. code:: js

PageTitle(header)

**Параметры:**

*header*

Заголовок создаваемой панели элементов

**Возвращаемые значения:**

?

**Примечания:**

Чтобы корректно закрыть тег DIV, в конце следует добавить вызов функции PageEnd.


 **Функция SetVar**

Присваивает переменным значения

**Синтаксис:**

.. code:: js

SetVar(name=value, ... )

**Параметры:**

*name*

Наименование переменной

*value*

Присваиваемое значение

**Возвращаемые значения:**

?

**Примечания:**

Вывод данных при выполнении данной функции отсутствует. После окончания выполнения функции возможно обращение к переменным в формате #var1, #var2, ...


 **Функция StateValue**

Возвращает значение заданного параметра

**Синтаксис:**

.. code:: js

StateValue(name)

**Параметры:**

*name*

Наименование параметра в таблице state_parameters

**Возвращаемые значения:**

Значение указанного параметра


 **Функция StateValue**

Возвращает значение заданного параметра

**Синтаксис:**

.. code:: js

StateValue(name)

**Параметры:**

*name*

Наименование параметра в таблице state_parameters

**Возвращаемые значения:**

Значение указанного параметра


**Функция SysLink**

Создает элемент управления "Ссылка (загрузка шаблона)"

**Синтаксис:**

.. code:: js

SysLink(page, text, [params])

**Параметры:**

*page*

Активная ссылка на создаваемом элементе управления

*text*

Текст ссылки

*params*

Передаваемые параметры при активации созданного элемента управления (необязательный параметр)

**Возвращаемые значения:**

?


**Table** {
    Table: tablename
    Order: id
    Where: условие
    Columns: [[Заголовок, значение],...]
} - возвращает таблицу Table - имя таблицы, Order - колонка сортировки, необязательный параметр. Where - условие выборки, необязательный параметр. Columns - массив показываемых столбцов из заголовка и значений. В качестве значений можно указывать #имяколонки#.


**Title(text)** - создает заголовок с классом content-heading.


**TemplateNav(template,text,[params])** - возвращает ссылку на шаблон load_template('template’, {params} ), где text - текст ссылки. params не является обязательным параметром.


**TextHidden(idname,....)** - создает скрытые textarea с id = указанным именам, а в качестве значение берется значение переменной с таким же именем. Например,
если есть переменная test = “Строка”, то TextHidden создаст textarea с id=”test” и значением Строка.


**TxForm{Contract: TXName}** - Функция возвращает форму указанного контаркта с именем TXName.


**TxId(txname)** - возвращается идентификатор указанной транзакции.
