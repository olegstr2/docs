################################################################################
Шаблонизатор для страниц и приложений
################################################################################

********************************************************************************
Общие сведения
********************************************************************************

Для  создания шаблонов  страниц и написания приложений используется специализированный интерпретируемый язык, который предоставляет возможность формировать требуемую HTML-страницу.

При этом непосредственно  шаблоны могут включать вызовы следующих видов:

1) FuncName()

2) FuncName{}

Вне зависимости от используемого вида, производится  вызов требуемой функции языка GO, однако в первом случае параметры передаются в функцию как массив строк, а во втором -- как ассоциативный массив с парами ключ-значение. При этом передаваемые параметры можно не заключать в кавычки, но если какой-либо параметр содержит запятую или закрывающую скобку, то следует заключить значение данного параметра  в двойные или обратные кавычки ("значение" или `значение`, соответственно).


Например,

.. code:: js

      FuncName( строка 1, строка 2, “строка, включающая запятую”)

.. code:: js

      FuncName{ string1: строка 1, string2: строка 2, string3: “строка, которая с запятой” }

*Обратите внимание, функции могут дополняться разработчиком системы новыми параметрами без предварительного уведомления пользователей.*

********************************************************************************
Список функций
********************************************************************************
 **Функция AppNav**

Возвращает ссылку на приложение с указанным именем

**Синтаксис:**

.. code:: js

AppNav(appname, [text])

**Параметры:**

*appname*

Наименование приложения, на которое требуется получить ссылку

*text*

Тест возвращаемой ссылки (необязательный параметр)

**Возвращаемые значения:**

Ссылка на приложение в формате ?.

**Примечания:**

Если параметр text не указан, то текст ссылки скопирован с параметра appname.

**Функция BtnEdit**

Создает элемент управления "Кнопка (шестеренка)"

**Синтаксис:**

.. code:: js

BtnEdit(page, id)

**Параметры:**

*page*

Активная ссылка на создаваемом элементе управления

*id*

Передаваемый параметр при активации созданного элемента управления

**Возвращаемые значения:**

?

**Примечания:**

Данная функция применяется в таблицах для формирования ссылок на операцию редактирования элементов.

**Функция BtnTemplate**

Создает элемент управления "Кнопка (загрузка шаблона)"

**Синтаксис:**

.. code:: js

BtnTemplate(template, text, params)

**Параметры:**

*template*

Активная ссылка на создаваемом элементе управления

*text*

Текст ссылки

*params*

Передаваемые параметры при активации созданного элемента управления (необязательный параметр)

**Возвращаемые значения:**

?

**Функция GetRow**

Возвращает определенную запись из заданной таблицы

**Синтаксис:**

.. code:: js

GetRow(prefix, table, colname, value)

**Параметры:**

*prefix*

Список переменных для записи результата выполнения функции

*table*

Наименование таблицы с запрашиваемой записью

*colname*

Наименование искомого столбца

*value*

Искомое значение

**Возвращаемые значения:**

?

**Примечания:**

Вывод данных при выполнении данной функции отсутствует.




To be continued
+++++++++++++




**GetRow(prefix, table, colname, value)** - получает запись из таблицы table с условием colname = value. Все столбцы записи записываются в переменные с префиксом prefix.
Например, имеется id, name получим prefix_id, prefix_name. Эти переменные можно использовать в дальнейшем. Для этого достаточно указывать #prefix_id#, #prefix_name#. Вывод отсутствует.


**Image(src, [alt] )** - возвращает тэг img с указанной картинкой. alt - необязательный параметр.


**Json(data)** - создает тэг script с переменной jdata и указанными json данными.
Например,

.. code:: js

      Json(`param1: 1, param2: “строка”`) 
      
даст 

.. code:: js

      var jdata = { param1: 1, param2: “строка”}


**Navigation( params, ….)** - возвращает панель с хлебными крошками params и ссылкой Edit справа. Например, Navigation( LiTemplate(dashboard_default, citizen),goverment)

**LiTemplate(template, [text])** - возвращает элемент li с сылкой на указанный шаблон. Если text не указан, то текст ссылки будет такой же как template.

**LinkTemplate(template,text,params)** - создает ссылку на шаблон load_template('template’, {params} ), где text - текст ссылки. params не является обязательным параметром.


**MarkDown(text)** - преобразует текст с разметкой markdown в HTML. Например,

.. code:: js

      MarkDown(`## Header
            Параграф
      `)


**PageTitle(header)** - создает панель для элементов с заголовком header. В конце необходимо вставить вызов PageEnd() для закрытия div-ов.


**SetVar( name=value,.....)** - функция присваивает значения указанным переменным. name - имя переменной, value - значение. Вывод отсутствует. 
Например,

.. code:: js

      SetVar( var1= value1, var2 = “Значение 2”, var3=10 )
      
К переменным можно обращаться в дальнейшем как  #var1#, #var2# …


**StateValue(name)** - возвращает значение указанного параметра из таблицы state_parameters.


**SysLink(page,text,[params])** - создает ссылку на страницу load_page(page, {params} ), где text - текст ссылки. params не является обязательным параметром.


**Table** {
    Table: tablename
    Order: id
    Where: условие
    Columns: [[Заголовок, значение],...]
} - возвращает таблицу Table - имя таблицы, Order - колонка сортировки, необязательный параметр. Where - условие выборки, необязательный параметр. Columns - массив показываемых столбцов из заголовка и значений. В качестве значений можно указывать #имяколонки#.


**Title(text)** - создает заголовок с классом content-heading.


**TemplateNav(template,text,[params])** - возвращает ссылку на шаблон load_template('template’, {params} ), где text - текст ссылки. params не является обязательным параметром.


**TextHidden(idname,....)** - создает скрытые textarea с id = указанным именам, а в качестве значение берется значение переменной с таким же именем. Например,
если есть переменная test = “Строка”, то TextHidden создаст textarea с id=”test” и значением Строка.


**TxForm{Contract: TXName}** - Функция возвращает форму указанного контаркта с именем TXName.


**TxId(txname)** - возвращается идентификатор указанной транзакции.
